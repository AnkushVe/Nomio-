import React, { useState } from 'react';
import { Clock, MapPin, DollarSign, ChevronRight, ChevronDown, Download, Share2, Mail } from 'lucide-react';
import axios from 'axios';

interface ItineraryData {
  itinerary: Array<{
    day: number;
    date: string;
    title: string;
    activities: Array<{
      time: string;
      activity: string;
      location: string;
      description: string;
      cost: string;
      coordinates: [number, number];
    }>;
  }>;
  summary: {
    totalCost: string;
    highlights: string[];
    tips: string[];
  };
}

interface ItineraryDisplayProps {
  data: ItineraryData;
  isLoading: boolean;
}

const ItineraryDisplay: React.FC<ItineraryDisplayProps> = ({ data, isLoading }) => {
  const [expandedDays, setExpandedDays] = useState<Set<number>>(new Set([1]));
  const [showMap, setShowMap] = useState(true);
  const [showEmailModal, setShowEmailModal] = useState(false);
  const [email, setEmail] = useState('');
  const [isEmailSending, setIsEmailSending] = useState(false);
  const [emailMessage, setEmailMessage] = useState('');

  const toggleDay = (day: number) => {
    const newExpandedDays = new Set(expandedDays);
    if (newExpandedDays.has(day)) {
      newExpandedDays.delete(day);
    } else {
      newExpandedDays.add(day);
    }
    setExpandedDays(newExpandedDays);
  };

  const handleDownload = () => {
    const itineraryText = data.itinerary.map(day => 
      `Day ${day.day}: ${day.title}\n${day.activities.map(activity => 
        `${activity.time} - ${activity.activity} at ${activity.location}\n${activity.description}\nCost: ${activity.cost}\n`
      ).join('\n')}`
    ).join('\n\n');

    const blob = new Blob([itineraryText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'travel-itinerary.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'My Travel Itinerary',
          text: `Check out my travel itinerary generated by TravelPlanner!`,
          url: window.location.href,
        });
      } catch (error) {
        console.log('Error sharing:', error);
      }
    } else {
      // Fallback to clipboard
      navigator.clipboard.writeText(window.location.href);
      alert('Link copied to clipboard!');
    }
  };

  const handleEmailSend = async () => {
    if (!email || !email.includes('@')) {
      setEmailMessage('Please enter a valid email address');
      return;
    }

    setIsEmailSending(true);
    setEmailMessage('');

    try {
      const response = await axios.post('/api/send-itinerary-email', {
        email: email,
        itineraryData: data,
        userDetails: {}
      });

      if (response.data.success) {
        setEmailMessage('Email sent successfully! Check your inbox.');
        setEmail('');
        setTimeout(() => {
          setShowEmailModal(false);
          setEmailMessage('');
        }, 3000);
      } else {
        setEmailMessage(response.data.message || 'Failed to send email');
      }
    } catch (error) {
      console.error('Error sending email:', error);
      setEmailMessage('Failed to send email. Please try again.');
    } finally {
      setIsEmailSending(false);
    }
  };

  if (isLoading) {
    return (
      <section className="py-20 bg-gray-50">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4"></div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">Generating Your Itinerary</h3>
            <p className="text-gray-600">This may take a few moments...</p>
          </div>
        </div>
      </section>
    );
  }

  return (
    <section className="py-20 bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            Your Travel Itinerary
          </h2>
          <p className="text-xl text-gray-600 mb-8">
            Here's your personalized travel plan
          </p>
          
          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center mb-8">
            <button
              onClick={handleDownload}
              className="flex items-center justify-center px-6 py-3 bg-white border border-gray-300 rounded-xl hover:bg-gray-50 transition-colors"
            >
              <Download className="w-4 h-4 mr-2" />
              Download Itinerary
            </button>
            <button
              onClick={() => setShowEmailModal(true)}
              className="flex items-center justify-center px-6 py-3 bg-green-500 text-white rounded-xl hover:bg-green-600 transition-colors"
            >
              <Mail className="w-4 h-4 mr-2" />
              Email Itinerary
            </button>
            <button
              onClick={handleShare}
              className="flex items-center justify-center px-6 py-3 bg-white border border-gray-300 rounded-xl hover:bg-gray-50 transition-colors"
            >
              <Share2 className="w-4 h-4 mr-2" />
              Share
            </button>
            <button
              onClick={() => setShowMap(!showMap)}
              className="flex items-center justify-center px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl hover:from-blue-600 hover:to-purple-700 transition-all duration-300"
            >
              <MapPin className="w-4 h-4 mr-2" />
              {showMap ? 'Hide' : 'Show'} Map
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Itinerary */}
          <div className="lg:col-span-2">
            <div className="space-y-6">
              {data.itinerary.map((day) => (
                <div key={day.day} className="bg-white rounded-2xl shadow-lg overflow-hidden">
                  <button
                    onClick={() => toggleDay(day.day)}
                    className="w-full px-6 py-4 bg-gradient-to-r from-blue-500 to-purple-600 text-white text-left hover:from-blue-600 hover:to-purple-700 transition-all duration-300"
                  >
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className="text-lg font-semibold">Day {day.day}</h3>
                        <p className="text-sm opacity-90">{day.title}</p>
                      </div>
                      {expandedDays.has(day.day) ? (
                        <ChevronDown className="w-5 h-5" />
                      ) : (
                        <ChevronRight className="w-5 h-5" />
                      )}
                    </div>
                  </button>

                  {expandedDays.has(day.day) && (
                    <div className="p-6">
                      <div className="space-y-4">
                        {day.activities.map((activity, index) => (
                          <div key={index} className="flex items-start space-x-4 p-4 bg-gray-50 rounded-xl">
                            <div className="flex-shrink-0">
                              <div className="flex items-center justify-center w-12 h-12 bg-blue-100 rounded-lg">
                                <Clock className="w-5 h-5 text-blue-600" />
                              </div>
                            </div>
                            <div className="flex-1">
                              <div className="flex items-center space-x-2 mb-2">
                                <span className="font-semibold text-gray-900">{activity.time}</span>
                                <span className="text-blue-600 font-medium">{activity.activity}</span>
                              </div>
                              <div className="flex items-center space-x-2 mb-2">
                                <MapPin className="w-4 h-4 text-gray-500" />
                                <span className="text-gray-700">{activity.location}</span>
                              </div>
                              <p className="text-gray-600 mb-3">{activity.description}</p>
                              <div className="flex items-center space-x-2">
                                <DollarSign className="w-4 h-4 text-green-600" />
                                <span className="text-green-600 font-medium">{activity.cost}</span>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Summary Card */}
            <div className="bg-white rounded-2xl shadow-lg p-6">
              <h3 className="text-xl font-bold text-gray-900 mb-4">Trip Summary</h3>
              
              <div className="space-y-4">
                <div className="flex items-center justify-between py-2 border-b border-gray-200">
                  <span className="text-gray-600">Total Cost</span>
                  <span className="font-semibold text-green-600">
                    {data.summary.totalCost || "Varies"}
                  </span>
                </div>
                
                <div className="flex items-center justify-between py-2 border-b border-gray-200">
                  <span className="text-gray-600">Duration</span>
                  <span className="font-semibold text-gray-900">
                    {data.itinerary.length} {data.itinerary.length === 1 ? 'day' : 'days'}
                  </span>
                </div>
                
                <div className="flex items-center justify-between py-2">
                  <span className="text-gray-600">Activities</span>
                  <span className="font-semibold text-gray-900">
                    {data.itinerary.reduce((total, day) => total + day.activities.length, 0)}
                  </span>
                </div>
              </div>
            </div>

            {/* Highlights */}
            <div className="bg-white rounded-2xl shadow-lg p-6">
              <h3 className="text-xl font-bold text-gray-900 mb-4">Highlights</h3>
              <ul className="space-y-2">
                {data.summary.highlights && data.summary.highlights.length > 0 ? (
                  data.summary.highlights.map((highlight, index) => (
                    <li key={index} className="flex items-start space-x-2">
                      <div className="flex-shrink-0 w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                      <span className="text-gray-700">{highlight}</span>
                    </li>
                  ))
                ) : (
                  <li className="flex items-start space-x-2">
                    <div className="flex-shrink-0 w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                    <span className="text-gray-700">AI-generated itinerary</span>
                  </li>
                )}
              </ul>
            </div>

            {/* Tips */}
            <div className="bg-white rounded-2xl shadow-lg p-6">
              <h3 className="text-xl font-bold text-gray-900 mb-4">Travel Tips</h3>
              <ul className="space-y-2">
                {data.summary.tips && data.summary.tips.length > 0 ? (
                  data.summary.tips.map((tip, index) => (
                    <li key={index} className="flex items-start space-x-2">
                      <div className="flex-shrink-0 w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                      <span className="text-gray-700">{tip}</span>
                    </li>
                  ))
                ) : (
                  <>
                    <li className="flex items-start space-x-2">
                      <div className="flex-shrink-0 w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                      <span className="text-gray-700">Check local attractions</span>
                    </li>
                    <li className="flex items-start space-x-2">
                      <div className="flex-shrink-0 w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                      <span className="text-gray-700">Book accommodations in advance</span>
                    </li>
                  </>
                )}
              </ul>
            </div>
          </div>
        </div>

        {/* Map View - Removed Mapbox dependency */}
        {showMap && (
          <div className="mt-12 p-8 bg-gray-100 rounded-lg text-center">
            <p className="text-gray-600">Map view not available - using Google Maps in main interface</p>
          </div>
        )}

        {/* Email Modal */}
        {showEmailModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
              <h3 className="text-2xl font-bold text-gray-900 mb-4">Email Your Itinerary</h3>
              <p className="text-gray-600 mb-6">
                Enter your email address to receive a detailed copy of your travel itinerary.
              </p>
              
              <div className="space-y-4">
                <div>
                  <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                    Email Address
                  </label>
                  <input
                    type="email"
                    id="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    placeholder="your.email@example.com"
                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    disabled={isEmailSending}
                  />
                </div>

                {emailMessage && (
                  <div className={`p-3 rounded-xl text-sm ${
                    emailMessage.includes('successfully') 
                      ? 'bg-green-100 text-green-700' 
                      : 'bg-red-100 text-red-700'
                  }`}>
                    {emailMessage}
                  </div>
                )}

                <div className="flex gap-3">
                  <button
                    onClick={handleEmailSend}
                    disabled={isEmailSending}
                    className="flex-1 bg-gradient-to-r from-blue-500 to-purple-600 text-white px-6 py-3 rounded-xl hover:from-blue-600 hover:to-purple-700 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isEmailSending ? (
                      <div className="flex items-center justify-center">
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        Sending...
                      </div>
                    ) : (
                      'Send Email'
                    )}
                  </button>
                  <button
                    onClick={() => {
                      setShowEmailModal(false);
                      setEmail('');
                      setEmailMessage('');
                    }}
                    disabled={isEmailSending}
                    className="px-6 py-3 border border-gray-300 text-gray-700 rounded-xl hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default ItineraryDisplay;
